<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0" id="WebApp_1462178752332">
	
	<display-name>morning</display-name>   <!-- Web应用名称：提供GUI工具可能会用来标记这个特定的Web应用的一个名称 -->  
	
	<!--  指定spring配置文件位置:Spring配置文件 -->
	<context-param>                                                 <!-- Sping应用上下文参数：声明应用范围内的初始化参数。 context-param元素声明应用范围内的初始化参数。 -->
		<param-name>contextConfigLocation</param-name>              <!-- 环境配置位置  -->
		<param-value>classpath*:spring/spring-context*.xml</param-value>
	</context-param>
	
	<!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->  
	<!-- 这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/> -->  
	<!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->  
	<!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->  
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 编码过滤器  所有的请求及响应都经过  过滤中文乱码  -->
	<filter id="Filter_1462180666891">
		<filter-name>encodingFilter</filter-name>     
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class> <!--具体的过滤器的类的完整的包名+类名。注意：不能写错了。否则容器不能正确的实例化过滤器  --> 
		<async-supported>true</async-supported>                     <!-- 异步支持 -->
		<init-param>
			<param-name>encoding</param-name>   					<!-- 参数名 --> 
			<param-value>UTF-8</param-value>    					<!-- 参数值:编码方式 -->
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>    							<!-- 指定过滤器负责过滤的URL。这里指定了*.jsp表示在访问任何一个jsp页面时都会先使用CharacterEncodingFilter过滤器进行过滤。如果写成login.jsp.则只有在访问login.jsp时才会调用该过滤器进行过滤。 --> 
	</filter-mapping>
	
	
	<!-- 网页布局和修饰的框架 -->
	<filter>
		<filter-name>sitemesh</filter-name>
		<filter-class>org.sitemesh.config.ConfigurableSiteMeshFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>sitemesh</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 防止Spring内存溢出监听器 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	
	<!-- 前端控制器：Spring MVC servlet   -->
	<servlet id="Servlet_1462180666863">
		<servlet-name>SpringMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>                                             <!--定义Servlet的初始化参数(包括参数名和参数值)一个<servlet>元素里可以有多个<init-param>元素。在Servlet类中通过ServletConfig类的来访问这些参数。   -->
			<param-name>contextConfigLocation</param-name>  	 <!-- 环境配置位置 -->
			<param-value>classpath:springmvc/spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>        			 <!-- <load-on-startup>1</load-on-startup>是启动顺序，指定当前Web应用启动时装载Servlet的次序。让这个Servlet随Servletp容器一起启动。 -->
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping id="ServletMapping_1462180666832">
		<servlet-name>SpringMVC</servlet-name>
		<url-pattern>/</url-pattern>               				 <!--  <url-pattern>/</url-pattern> 指定访问这个Servlet的URL。这里给出的是对于整个Web应用的相对URL路径. 会拦截/结尾的请求。 -->
	</servlet-mapping>
	
	<!-- WebStatFilter用于采集web-jdbc关联监控的数据。 -->
	<filter>
        <filter-name>DruidWebStatFilter</filter-name>
        <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
        <!-- 经常需要排除一些不必要的url，比如.js,/jslib/等等。配置在init-param中 -->
        <init-param>
            <param-name>exclusions</param-name>
            <param-value>/static/*,*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>DruidWebStatFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
	<!-- druid -->
    <servlet>
        <servlet-name>DruidStatView</servlet-name>
        <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
        <init-param>  
	    <!-- 允许清空统计数据 -->  
	    <param-name>resetEnable</param-name>  
	    <param-value>true</param-value>  
	    </init-param>  
	    <init-param>  
	    <!-- 用户名 -->  
	    <param-name>loginUsername</param-name>  
	    <param-value>druid</param-value>  
	    </init-param>  
	    <init-param>  
	    <!-- 密码 -->  
	    <param-name>loginPassword</param-name>  
	    <param-value>druid</param-value>  
	    </init-param> 
    </servlet>
    <servlet-mapping>
        <servlet-name>DruidStatView</servlet-name>
        <url-pattern>/druid/*</url-pattern>
    </servlet-mapping>
	
	<!-- 在 用户访问Web应用时,如果仅给出Web应用的根访问URL，没有指定具体的文件名，容器会调用<weblcome-file- list> 元素里指定的文件清单。 --> 
	<welcome-file-list>
		<welcome-file>/index.jsp</welcome-file> 				 <!-- <welcome-file-list>里允许有多个<welcome-file>元 素，每个元素代表一个文件。容器会先找第一文文件件是否存在，如果存在这把这个文件返回个客户，不再进行其他文件的查找。如果不存在则找第二个文件，依次 类推。如果所有文件都不存在，则跑出404错误-->
	</welcome-file-list>
	
	<!-- 当你在客户端用view source看JSP生成的代码时，会发现有很多空行，他们是由< %...% >后的回车换行而生成的，也就是说每一行由< %...% >包含的JSP代码到客户端都变成一个空行，虽然不影响浏览，但还是希望能把他们删掉。 -->
	<jsp-config>
		<jsp-property-group>
			<url-pattern>*.jsp</url-pattern>
			<trim-directive-whitespaces>true</trim-directive-whitespaces>
		</jsp-property-group>
	</jsp-config>
	<!-- 还有一种就是在单个的jsp中添加<%@ page trimDirectiveWhitespaces="true"%>. -->
	
	<!-- 配置404与500错误处理 -->   
	<error-page>
		<error-code>500</error-code>
		<location>/WEB-INF/views/common/500.jsp</location>
	</error-page>
	<error-page>
		<error-code>400</error-code>
		<location>/WEB-INF/views/common/400.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/WEB-INF/views/common/403.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/views/common/404.jsp</location>
	</error-page>
	
	<!-- HttpSession的生命周期。 -->
	<session-config> 
		<session-timeout>10</session-timeout> 					 <!-- 设 定HttpSession的生命周期。这里以分钟计算。下面的设定指明Session在最长不活动时间为10分钟。过了这个时间，Servlet容器将它 作为无效处理。注意这里和程序里指定的计数单位不同，程序里是以秒为单位。<session-config>只有<session- timeout>这个元素–>  -->
	</session-config>
	
</web-app>

